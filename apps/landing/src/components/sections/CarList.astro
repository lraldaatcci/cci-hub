---
export const prerender = false; // still dynamic if you wish
import Section from "./Section.astro";
import type { Car } from "../../data/types";
import cardb from "../../data/cardb.json";

// Import the full car database (we pass this to the client).
const cars = cardb as Car[];

// Compute unique filter values.
const brands = [...new Set(cars.map((car) => (car.brand || "").trim()))].sort();
const transmissions = [
  ...new Set(cars.map((car) => (car.transmission || "").trim())),
].sort();
const fuels = [...new Set(cars.map((car) => (car.fuel || "").trim()))].sort();
const locations = [
  ...new Set(cars.map((car) => (car.location || "").trim())),
].sort();

// Function to format price.
function formatPrice(price: number) {
  return new Intl.NumberFormat("es-GT", {
    style: "currency",
    currency: "GTQ",
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  }).format(price);
}
---

<Section>
  <div class="max-w-7xl mx-auto p-5">
    <div class="flex flex-col md:flex-row gap-6">
      <!-- Sidebar Filters -->
      <div class="w-full md:w-64 flex-shrink-0">
        <div id="filterForm" class="bg-white p-4 rounded-lg shadow">
          <div class="mb-4">
            <h3 class="font-bold mb-2">
              Mi búsqueda (<span id="resultCount"></span>)
            </h3>
            <button
              type="button"
              id="clearFilters"
              class="text-blue-600 text-sm"
            >
              Quitar filtros
            </button>
          </div>
          <!-- Brand Filter -->
          <div class="mb-4">
            <h4 class="font-semibold mb-2">Marca</h4>
            <div class="space-y-2">
              {
                brands.map((brand) => (
                  <label class="flex items-center">
                    <input
                      type="checkbox"
                      name="marca"
                      value={brand.toLowerCase().trim()}
                      class="mr-2"
                    />
                    {brand}
                  </label>
                ))
              }
            </div>
          </div>
          <!-- Transmission Filter -->
          <div class="mb-4">
            <h4 class="font-semibold mb-2">Transmisión</h4>
            <div class="space-y-2">
              {
                transmissions.map((transmission) => (
                  <label class="flex items-center">
                    <input
                      type="checkbox"
                      name="transmision"
                      value={transmission.toLowerCase().trim()}
                      class="mr-2"
                    />
                    {transmission}
                  </label>
                ))
              }
            </div>
          </div>
          <!-- Fuel Filter -->
          <div class="mb-4">
            <h4 class="font-semibold mb-2">Combustible</h4>
            <div class="space-y-2">
              {
                fuels.map((fuel) => (
                  <label class="flex items-center">
                    <input
                      type="checkbox"
                      name="combustible"
                      value={fuel.toLowerCase().trim()}
                      class="mr-2"
                    />
                    {fuel}
                  </label>
                ))
              }
            </div>
          </div>
          <!-- Location Filter -->
          <div class="mb-4">
            <h4 class="font-semibold mb-2">Ubicación</h4>
            <div class="space-y-2">
              {
                locations.map((location) => (
                  <label class="flex items-center">
                    <input
                      type="checkbox"
                      name="ciudad"
                      value={location.toLowerCase().trim()}
                      class="mr-2"
                    />
                    {location}
                  </label>
                ))
              }
            </div>
          </div>
        </div>
      </div>
      <!-- Car Listings -->
      <div class="flex-1">
        <div class="mb-4 flex justify-between items-center">
          <h2 id="resultCountHeader" class="text-xl font-bold"></h2>
          <select id="sortSelect" class="border rounded p-2">
            <option value="">Mejores resultados</option>
            <option value="precio:menor">Precio: menor a mayor</option>
            <option value="precio:mayor">Precio: mayor a menor</option>
            <option value="año:reciente">Año: más reciente</option>
            <option value="kilometraje:menor">Kilómetros: menor a mayor</option>
          </select>
        </div>
        <div id="carListings" class="grid gap-6">
          <!-- Listings will be rendered here by JavaScript -->
        </div>
      </div>
    </div>
  </div>
</Section>

<!-- Client-side script: filtering and sorting are handled entirely in the browser. -->
<script define:vars={{ cars }}>
  /* Expose the full car database (output by the server) to the client.
     The JSON.stringify is safe here since 'cars' is an array of plain objects. */
  const carData = JSON.parse(JSON.stringify(cars));

  // Client version of formatPrice.
  function formatPrice(price) {
    return new Intl.NumberFormat("es-GT", {
      style: "currency",
      currency: "GTQ",
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(price);
  }

  // Creates the HTML for a single car item.
  function createCarHTML(car) {
    return `
      <div class="bg-white rounded-lg shadow overflow-hidden">
        <div class="flex flex-col md:flex-row">
          <div class="md:w-1/3">
            <img src="${car.image}" alt="${car.brand} ${car.model}" class="w-full h-48 object-cover" />
          </div>
          <div class="p-4 flex-1">
            <div class="flex justify-between items-start">
              <div>
                <h3 class="text-xl font-bold mb-2">${car.brand} ${car.model}</h3>
                <p class="text-gray-600 mb-2">${car.description}</p>
              </div>
              <div class="text-right">
                <p class="text-2xl font-bold text-primary">${formatPrice(car.price)}</p>
              </div>
            </div>
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4">
              <div>
                <p class="text-gray-600">Año</p>
                <p class="font-semibold">${car.year}</p>
              </div>
              <div>
                <p class="text-gray-600">Kilómetros</p>
                <p class="font-semibold">${Number(car.mileage).toLocaleString()}</p>
              </div>
              <div>
                <p class="text-gray-600">Transmisión</p>
                <p class="font-semibold">${car.transmission}</p>
              </div>
              <div>
                <p class="text-gray-600">Combustible</p>
                <p class="font-semibold">${car.fuel}</p>
              </div>
            </div>
            <div class="mt-4 flex gap-2">
              ${car.features
                .slice(0, 3)
                .map(
                  (feature) =>
                    `<span class="bg-gray-100 px-2 py-1 rounded text-sm">${feature}</span>`
                )
                .join("")}
            </div>
          </div>
        </div>
      </div>
    `;
  }

  // Applies the currently selected filters and sorting to the car data.
  function applyFilters() {
    let filtered = [...carData];

    // Get checked filter values.
    const brandFilters = Array.from(
      document.querySelectorAll("input[name='marca']:checked")
    ).map((input) => input.value);
    const transmissionFilters = Array.from(
      document.querySelectorAll("input[name='transmision']:checked")
    ).map((input) => input.value);
    const fuelFilters = Array.from(
      document.querySelectorAll("input[name='combustible']:checked")
    ).map((input) => input.value);
    const locationFilters = Array.from(
      document.querySelectorAll("input[name='ciudad']:checked")
    ).map((input) => input.value);

    // Filter by brand.
    if (brandFilters.length > 0) {
      filtered = filtered.filter((car) =>
        brandFilters.includes((car.brand || "").toLowerCase().trim())
      );
    }
    // Filter by transmission.
    if (transmissionFilters.length > 0) {
      filtered = filtered.filter((car) =>
        transmissionFilters.includes(
          (car.transmission || "").toLowerCase().trim()
        )
      );
    }
    // Filter by fuel.
    if (fuelFilters.length > 0) {
      filtered = filtered.filter((car) =>
        fuelFilters.includes((car.fuel || "").toLowerCase().trim())
      );
    }
    // Filter by location.
    if (locationFilters.length > 0) {
      filtered = filtered.filter((car) =>
        locationFilters.some((loc) =>
          (car.location || "").toLowerCase().includes(loc)
        )
      );
    }

    // Sorting based on the selected option.
    const sortSelect = document.getElementById("sortSelect");
    if (sortSelect) {
      const sortParam = sortSelect.value;
      if (sortParam === "precio:menor") {
        filtered.sort((a, b) => Number(a.price) - Number(b.price));
      } else if (sortParam === "precio:mayor") {
        filtered.sort((a, b) => Number(b.price) - Number(a.price));
      } else if (sortParam === "año:reciente") {
        filtered.sort((a, b) => b.year - a.year);
      } else if (sortParam === "kilometraje:menor") {
        filtered.sort((a, b) => Number(a.mileage) - Number(b.mileage));
      }
    }

    // Update Listings.
    const listingsContainer = document.getElementById("carListings");
    if (listingsContainer) {
      listingsContainer.innerHTML = filtered
        .map((car) => createCarHTML(car))
        .join("");
    }
    // Update result counts at two locations.
    const resultCount = document.getElementById("resultCount");
    if (resultCount) {
      resultCount.textContent = filtered.length;
    }
    const resultCountHeader = document.getElementById("resultCountHeader");
    if (resultCountHeader) {
      resultCountHeader.textContent = `${filtered.length} Resultados`;
    }
  }

  // Set up event listeners when the page has loaded.
  document.addEventListener("DOMContentLoaded", () => {
    // Initial rendering.
    applyFilters();

    // When any checkbox (filter) changes, reapply filters.
    document.querySelectorAll("input[type='checkbox']").forEach((input) => {
      input.addEventListener("change", () => applyFilters());
    });

    // When the sort selector changes, reapply filters.
    document.getElementById("sortSelect")?.addEventListener("change", () => {
      applyFilters();
    });

    // Clear filters: uncheck all checkboxes and reset the sort select.
    document.getElementById("clearFilters")?.addEventListener("click", () => {
      document.querySelectorAll("input[type='checkbox']").forEach((input) => {
        input.checked = false;
      });
      const sortSelect = document.getElementById("sortSelect");
      if (sortSelect) {
        sortSelect.value = "";
      }
      applyFilters();
    });
  });
</script>
